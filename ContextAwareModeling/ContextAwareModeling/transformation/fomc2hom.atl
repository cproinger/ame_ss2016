-- @path FOM=/ContextAwareModeling/model/ManagerModel.ecore
-- @path FOMC=/ContextAwareModeling/model/FOMCompositionModel.ecore

module fomc2hom;
create OUT: FOM from IN: FOMC;

--helper context FOMC!ContextManager def : combine() : Sequence(Sequence(FOM!State)) =
	
--	;

helper context FOMC!Manager def: combine(oms : Sequence(FOM!Manager)) : Sequence(Sequence(FOM!State)) =
	
	self.states 
		-> collect(s | s.combine(oms -> collect(om | om.states)))
		-> iterate(i; res: Sequence(Sequence(FOM!State)) = Sequence{} | res.union(i))
		;

--helper def: counter : Integer = 0;

helper context FOM!State def: combine(oms : Sequence(Sequence(FOM!States))) : Sequence(Sequence(FOM!State)) = 
	if(oms.size() = 1) then
		oms.first() -> collect(sx | Sequence{self}.append(sx))
	else
--		Sequence{}
		oms.first() 
			-> collect(ss | 
				ss.combine(oms.excluding(oms.first()))
					-> collect(seq | Sequence{self}.union(seq))
				)
				-> iterate(i; res: Sequence(Sequence(FOM!State)) = Sequence{} | res.union(i))
	endif;


rule ContextManager2Manager {
	
	from
		cm: FOMC!ContextManager
	to
		tm : FOM!Manager (
			name <- cm.name + '-HOM4'
--			,states <- 
		)

	do {
		tm.states <- cm.manager
					-> sortedBy(m | m.states.size())
					.first()
					.combine(cm.manager.excluding(cm.manager.first()))
					-> collect(x | thisModule.FOMCStateCombination2FOMState(x));
			

	}
}

lazy rule FOMCStateCombination2FOMState {
	from
		combs : Sequence(FOM!State)
	to
		fs : FOM!State (
			name <- combs -> collect(c | c.name) -> sum()
		)
}


